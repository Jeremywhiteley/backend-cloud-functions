'use strict';

const {
  rootCollections,
} = require('../../admin/admin');
const {
  reportNames,
  httpsActions,
  dateFormats,
} = require('../../admin/constants');
const {
  alphabetsArray,
} = require('../recipients/report-utils');
const fs = require('fs');
const xlsxPopulate = require('xlsx-populate');
const momentTz = require('moment-timezone');


module.exports = (locals) => {
  const fileName = `Growthfile Daily Status Report.xlsx`;
  const filePath = `/tmp/${fileName}`;
  const yesterdayStartMoment =
    momentTz()
      .subtract(1, 'days')
      .startOf('days');
  const yesterdayMomentObject = yesterdayStartMoment.toObject();
  const standardDateString = momentTz().format(dateFormats.DATE);
  locals.messageObject['dynamic_template_data'] = {
    office: 'Growthfile',
    date: standardDateString,
    subject: `Daily Status Report_Growthfile_${standardDateString}`,
  };

  return Promise
    .all([
      rootCollections
        .inits
        .where('report', '==', reportNames.DAILY_STATUS_REPORT)
        .where('date', '==', yesterdayMomentObject.date)
        .where('month', '==', yesterdayMomentObject.months)
        .where('year', '==', yesterdayMomentObject.years)
        .limit(1)
        .get(),
      rootCollections
        .profiles
        .where('lastQueryFrom', '>=', yesterdayStartMoment.unix() * 1000)
        .get(),
      rootCollections
        .activityTemplates
        .orderBy('name', 'asc')
        .get(),
      xlsxPopulate
        .fromBlankAsync(),
    ])
    .then((result) => {
      const [
        initDocsQuery,
        profilesDocsQuery,
        activityTemplatesQuery,
        worksheet,
      ] = result;

      const usersStatusSheet = worksheet.addSheet('User Status Report');
      const activityStatusSheet = worksheet.addSheet('Activity Status Report');

      usersStatusSheet.row(1).style('bold', true);
      activityStatusSheet.row(1).style('bold', true);
      activityStatusSheet.column(1).style('bold', true);

      const activeYesterday = profilesDocsQuery.size;

      worksheet.deleteSheet('Sheet1');

      [
        'TOTAL USERS',
        'USERS ADDED YESTERDAY',
        'ACTIVE YESTERDAY',
        'INSTALLED YESTERDAY',
      ]
        .forEach((topRowValue, index) => {
          usersStatusSheet
            .cell(`${alphabetsArray[index]}1`).value(topRowValue);
        });

      const {
        totalUsers,
        usersAdded,
        installedToday,
        // withClientApi,
        withAdminApi,
        autoGenerated,
        withSupport,
        createApi,
        commentApi,
        changeStatusApi,
        updateApi,
        shareApi,
        totalActivities,
        activitiesAddedToday,
        templateUsageObject,
      } = initDocsQuery.docs[0].data();

      console.log('initDocPath', initDocsQuery.docs[0].ref.path);

      usersStatusSheet.cell('A2').value(totalUsers);
      usersStatusSheet.cell('B2').value(usersAdded);
      usersStatusSheet.cell('C2').value(activeYesterday);
      usersStatusSheet.cell('D2').value(installedToday || 0);

      [
        'TOTAL',
        'ADDED YESTERDAY',
        'USING ADMIN API',
        // 'USING CLIENT API',
        'AUTO GENERATED',
        'WITH SUPPORT',
        'CREATE API',
        'UPDATE API',
        'CHANGE STATUS API',
        'SHARE API',
        'COMMENT API',
      ]
        .forEach((topRowValue, index) => {
          activityStatusSheet
            .cell(`${alphabetsArray[index + 1]}1`).value(topRowValue);
        });

      activityStatusSheet.cell(`A1`).value('');
      // A2 is delibrately left blank for padding the second row
      activityStatusSheet.cell(`A2`).value('');
      activityStatusSheet.cell(`B2`).value(totalActivities);
      activityStatusSheet.cell(`C2`).value(activitiesAddedToday);
      activityStatusSheet.cell(`D2`).value(withAdminApi);
      // activityStatusSheet.cell(`E2`).value(withClientApi);
      activityStatusSheet.cell(`E2`).value(autoGenerated);
      activityStatusSheet.cell(`F2`).value(withSupport);
      activityStatusSheet.cell(`G2`).value(createApi);
      activityStatusSheet.cell(`H2`).value(updateApi);
      activityStatusSheet.cell(`I2`).value(changeStatusApi);
      activityStatusSheet.cell(`J2`).value(shareApi);
      activityStatusSheet.cell(`K2`).value(commentApi);

      activityTemplatesQuery.docs.forEach((doc, index) => {
        const rowCount = index + 3;
        const templateName = doc.get('name');

        activityStatusSheet
          .cell(`A${rowCount}`)
          .value(templateName.toUpperCase());

        const getCount = (action) => {
          const DEFAULT_VALUE = `(not used)`;

          if (!templateUsageObject[templateName]) {
            return DEFAULT_VALUE;
          }

          return templateUsageObject[templateName][action] || DEFAULT_VALUE;
        };

        const createApiCount = getCount(httpsActions.create);
        const updateApiCount = getCount(httpsActions.update);
        const changeStatusApiCount = getCount(httpsActions.changeStatus);
        const shareApiCount = getCount(httpsActions.share);
        const commentApiCount = getCount(httpsActions.comment);

        /**
         * H -> create
         * I -> update
         * J -> change-status
         * K -> share
         * L -> comment
         */
        activityStatusSheet
          .cell(`G${rowCount}`)
          .value(createApiCount);
        activityStatusSheet
          .cell(`H${rowCount}`)
          .value(updateApiCount);
        activityStatusSheet
          .cell(`I${rowCount}`)
          .value(changeStatusApiCount);
        activityStatusSheet
          .cell(`J${rowCount}`)
          .value(shareApiCount);
        activityStatusSheet
          .cell(`K${rowCount}`)
          .value(commentApiCount);
      });

      return worksheet
        .toFileAsync(filePath);
    })
    .then(() => {
      locals.messageObject.attachments.push({
        fileName,
        content: new Buffer(fs.readFileSync(filePath)).toString('base64'),
        type: 'text/csv',
        disposition: 'attachment',
      });

      return locals.sgMail.sendMultiple(locals.messageObject);
    })
    .catch(console.error);
};
