{
  "parserOptions": {
    // Required for certain syntax usages
    "ecmaVersion": 6,
    "ecmaFeatures": {
      "arrowFunctions": true,
      "forOf": true,
      "templateStrings": true,
      "spread": true
    }
  },
  "plugins": [
    "promise",
    "no-loops"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:promise/recommended"
  ],
  "env": {
    // Node.js global variables and Node.js scoping
    "node": true,
    // defines require() and define() as global variables as per the amd spec
    "amd": true,
    // enable all ECMAScript 6 features except for modules.
    "es6": true,
    // adds all of the Mocha testing global variables
    "mocha": true
  },
  "rules": {
    // Removed rule "disallow the use of console" from recommended eslint rules
    "no-console": "off",
    // Removed rule "disallow multiple spaces in regular expressions" from recommended eslint rules
    "no-regex-spaces": "warn",
    // Removed rule "disallow the use of debugger" from recommended eslint rules
    "no-debugger": "warn",
    // Removed rule "disallow unused variables" from recommended eslint rules
    "no-unused-vars": "warn",
    // Removed rule "disallow mixed spaces and tabs for indentation" from recommended eslint rules
    "no-mixed-spaces-and-tabs": "warn",
    // Warn against template literal placeholder syntax in regular strings
    "no-template-curly-in-string": 1,
    // Warn if return statements do not either always or never specify values
    "consistent-return": 1,
    // Warn if no return statements in callbacks of array methods
    "array-callback-return": 1,
    // Require the use of === and !==
    "eqeqeq": 2,
    // Disallow the use of alert, confirm, and prompt
    "no-alert": 2,
    // Disallow the use of arguments.caller or arguments.callee
    "no-caller": 2,
    // Disallow null comparisons without type-checking operators
    "no-eq-null": 2,
    // Disallow the use of eval
    "no-eval": 2,
    // Warn against extending native types
    "no-extend-native": 1,
    // Warn against unnecessary calls to .bind
    "no-extra-bind": 1,
    // Warn against unnecessary labels
    "no-extra-label": 1,
    // Disallow leading or trailing decimal points in numeric literals
    "no-floating-decimal": 2,
    // Warn against shorthand type conversions
    "no-implicit-coercion": 1,
    // Warn against function declarations and expressions inside loop statements
    "no-loop-func": 1,
    // Disallow new operators with the Function object
    "no-new-func": 2,
    // Warn against new operators with the String, Number, and Boolean objects
    "no-new-wrappers": 1,
    // Disallow throwing literals as exceptions
    "no-throw-literal": 2,
    // Require using Error objects as Promise rejection reasons
    "prefer-promise-reject-errors": 2,
    // Enforce “for” loop update clause moving the counter in the right direction
    "for-direction": 2,
    // Enforce return statements in getters
    "getter-return": 2,
    // Disallow await inside of loops
    "no-await-in-loop": 2,
    // Disallow comparing against -0
    "no-compare-neg-zero": 2,
    // Warn against catch clause parameters from shadowing variables in the outer scope
    "no-catch-shadow": 1,
    // Disallow identifiers from shadowing restricted names
    "no-shadow-restricted-names": 2,
    // Enforce return statements in callbacks of array methods
    "callback-return": 2,
    // Require error handling in callbacks
    "handle-callback-err": 2,
    // Warn against string concatenation with __dirname and __filename
    "no-path-concat": 1,
    // Prefer using arrow functions for callbacks
    "prefer-arrow-callback": 1,
    // Return inside each `then` to create readable and reusable Promise chains.
    // Forces developers to return console logs and http calls in promises.
    "promise/always-return": 2,
    //Enforces the use of `catch` on un-returned promises
    "promise/catch-or-return": 2,
    // Warn against nested `then` or `catch` statements
    "promise/no-nesting": 1,
    // Restricts the use of parentheses to only where they are necessary
    "no-extra-parens": "warn",
    // A variable that is never reassigned use `const` for it.
    "prefer-const": "warn",
    "no-const-assign": "error",
    // Use ES6 let and const for variable declaration.
    "no-var": "error",
    "prefer-template": "warn",
    "valid-jsdoc": [
      "warn",
      {
        "prefer": {
          "return": "returns"
        }
      }
    ],
    "arrow-parens": "warn",
    "no-confusing-arrow": "warn",
    "no-duplicate-imports": "error",
    "camelcase": "warn",
    "capitalized-comments": "warn",
    "comma-dangle": [
      "error",
      "always"
    ],
    "comma-style": "warn",
    "guard-for-in": "error",
    "max-depth": [
      "warn",
      3
    ],
    "no-div-regex": "warn",
    "no-undef": "error",
    "no-empty-function": "error",
    "require-await": "warn",
    "strict": "error",
    "no-undef-init": "warn",
    "no-undefined": "error",
    "no-use-before-define": "error",
    "func-style": [
      "error",
      "declaration",
      {
        "allowArrowFunctions": true
      }
    ],
    "line-comment-position": [
      "warn",
      {
        "position": "above"
      }
    ],
    "no-multi-assign": "warn",
    "max-statements-per-line": [
      "warn",
      {
        "max": 1
      }
    ],
    "semi": "error",
    "no-array-constructor": "warn",
    "newline-per-chained-call": [
      "warn",
      {
        "ignoreChainWithDepth": 4
      }
    ],
    "no-unused-expressions": "warn",
    "no-loops/no-loops": "warn",
    "no-inline-comments": "warn",
    "spaced-comment": [
      "warn",
      "always"
    ],
    "max-len": [
      "warn",
      {
        "code": 100,
        "tabWidth": 2,
        "ignoreComments": true,
        "ignoreUrls": true,
        "ignoreTrailingComments": true,
        "ignoreStrings": true
      }
    ],
    "newline-before-return": "warn",
    "max-params": [
      "warn",
      {
        "max": 4
      }
    ]
  }
}
